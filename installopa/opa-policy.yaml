apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-opa
  namespace: default
  annotations:
    policy.open-cluster-management.io/standards: NIST-CSF
    policy.open-cluster-management.io/categories: PR.IP Information Protection Processes and Procedures, PR.PT Protective Technology
    policy.open-cluster-management.io/controls: PR.IP-1 Baseline Configuration, PR.PT-3 Least Functionality
spec:
  remediationAction: inform
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-opa-policies
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          namespaceSelector:
            exclude: ["kube-*"]
            include: ["default"]
          object-templates:
            - complianceType: musthave
              objectDefinition:
                kind: Namespace # must have namespace 'prod'
                apiVersion: v1
                metadata:
                  name: policies
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-opa-configmap
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          namespaceSelector:
            exclude: ["kube-*"]
            include: ["default"]
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: v1
                kind: ConfigMap
                metadata:
                  name: nopod
                  namespace: opa
                data:
                  nopod.rego: |-
                  package kubernetes.admission
                  deny[msg] {
                  input.request.kind.kind == "Pod"
                  input.request.namespace == "opa"
                  image := input.request.object.spec.containers[_].image
                  not startswith(image, "hooli.com")
                  msg := sprintf("image fails to come from trusted registry: %v", [image])
                  }
   
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: binding-policy-opa
  namespace: default
placementRef:
  name: placement-policy-opa
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
- name: policy-opa
  kind: Policy
  apiGroup: policy.open-cluster-management.io
---
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: placement-policy-opa
  namespace: default
spec:
  clusterConditions:
  - status: "True"
    type: ManagedClusterConditionAvailable
  clusterSelector:
    matchExpressions:
      []  # selects all clusters if not specified
